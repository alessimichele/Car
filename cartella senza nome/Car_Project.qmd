---
title: "Car Project"
format: revealjs
editor: visual
---

# Car Project

Describe the dataset: data about bla bla

## Goal

Goal for our project

-   Want to model price
-   Do some analysis after model choice

## Step

-   Data Cleaning

-   Exploratory Data Analysis

-   ...

```{r}
library(ggplot2)
library(plotly)
car <- read.csv("./car.csv")
# Remove observation 1080
car <- car[car$Kilometer != 2000.000,]
```

## 

## Data Cleaning

We've done this:

-   ..

-   ..

-   ..

-   ..

## Data Exploration

### Correlation Matrix

```{r}
library(corrplot)
cor_mat <- cor(car[,unlist(lapply(car, is.numeric), use.names = FALSE)],use = "complete.obs")
data<-expand.grid(X=unlist(dimnames(cor_mat)[2]),Y=unlist(dimnames(cor_mat)[2]))
data$Z<- c(cor_mat)

#ggplot(data,aes(X,Y,fill=Z))+geom_tile()+theme(axis.text.x=element_text(angle = -90, hjust = 0))+coord_equal()+scale_y_discrete(limits=rev)+geom_text(aes(label=prettyNum(Z,digits=2,format="f")), color="white", size=4)

corrplot(cor_mat, type = "upper")
```

## 

### Experiment

```{r}
p<-ggplot(car, aes(x=Kilometer, y=log(Price) )) +
  geom_bin2d(bins = 30) +
  scale_fill_continuous(type = "viridis") +
  theme_bw()
ggplotly(p)
```

## 

### Kilometer vs Log Price

```{r}
p<-ggplot(car[ car$Kilometer < 100 & car$Kilometer >50 & car$Price>exp(13) & car$Price< exp(15),], aes(x=Kilometer, y=log(Price), size = Engine, color = Fuel.Type)) +
    geom_point(alpha=0.5) +
  scale_size(range = c(.2, 7), name="Engine")
ggplotly(p)
```

## 

### Log Price vs Make

```{r}
car %>%
  ggplot( aes(x=Make, y=log(Price), fill=Make)) +
    geom_boxplot() +
    geom_jitter(color="black", size=0.2, alpha=0.5) +
    theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
    ggtitle("Log Price vs Make") + 
    xlab("") + ylab("Log Price")
```

## 

### Log Price vs Owner

```{r}
library(dplyr)
car %>%
  ggplot( aes(x=Owner, y=log(Price), fill=Owner)) +
    geom_boxplot() +
    
    geom_jitter(color="black", size=0.2, alpha=0.5) +
  
    ggtitle("Log Price vs Owner") +
    xlab("")
```

## 

### Distribution of Categorical Variables

```{r}
library(gridExtra)
p12 <- ggplot(car, aes(x=reorder(Make, Make, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Make')+
  ggtitle("Distribution of Make")+theme_minimal()+theme(axis.text.x = element_text(angle = 90))

p13 <- ggplot(car, aes(x=reorder(Fuel.Type, Fuel.Type, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Fuel Type')+
  ggtitle("Distribution of Fuel Type")+theme_minimal()

p14 <- ggplot(car, aes(x=reorder(Transmission,Transmission, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Transmission')+
  ggtitle("Distribution of Transmission")+theme_minimal()

p15 <- ggplot(car, aes(x=reorder(Owner,Owner, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Owner')+
  ggtitle("Distribution of Owner")+theme_minimal()

p16 <- ggplot(car, aes(x=reorder(Seller.Type, Seller.Type, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Seller Type')+
  ggtitle("Distribution of Seller Type")+theme_minimal()

p17 <- ggplot(car, aes(x=reorder(Drivetrain, Drivetrain, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Drivetrain')+
  ggtitle("Distribution of Drivetrain")+theme_minimal()

p18 <- ggplot(car, aes(x=reorder(SeatingCapacity, SeatingCapacity, function(x)-length(x)))) +
  geom_bar(fill='steelblue') +
  labs(x='Seating Capacity')+
  ggtitle("Distribution of Seating Capacity")+theme_minimal()

grid.arrange(p13, p14,p15, p16, p17, p18, ncol=3)
```

## 

### Price vs Numerical Variables

```{r}
car1 <- car[car$Kilometer !=925.000, ]
p12 <- ggplot(car, aes(x = Year, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) over the years")+ theme_classic()

p13 <-ggplot(car1, aes(x = Kilometer, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs travelled Kilometer")+ theme_classic() 

p14 <- ggplot(car, aes(x = Engine, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Engine")+ theme_classic()

p15 <- ggplot(car, aes(x = Power, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Max Power")+ theme_classic()

p16 <- ggplot(car, aes(x = Torque, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Max Torque")+ theme_classic()

p17 <- ggplot(car, aes(x = Length, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Length")+ theme_classic()

p18 <- ggplot(car, aes(x = Width, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Width")+ theme_classic()

p19 <- ggplot(car, aes(x = Height, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Height")+ theme_classic()

p20 <- ggplot(car, aes(x = TankCapacity, y =log(Price))) +
    geom_point(size=0.7)+
  ggtitle("Distribution of log(Price) vs Fuel Tank Capacity")+ theme_classic()

grid.arrange(p12, p13, p14,p15, p16, p17, p18, p19, p20, ncol=3)
```

## 

### Kilometer and logPrice analysis

```{r}
car1 <- car[car$Kilometer !=925.000, ]
pl1 <- ggplot(car1, aes(x=Kilometer, y=log(Price)))+
  geom_point(aes(col=Year))+theme_classic()
ggplotly(pl1)
```

## Linear Model

First, we split our data into train and test set.

```{r, echo=T}
set.seed(1)
index <- sample(nrow(car), nrow(car)*0.8, replace=F)
train <- car[index,]
test <- car[-index,]
```

Then fit the first model:

```{r}
lm <- lm(Price ~ as.factor(Make)+Year+Kilometer+as.factor(Fuel.Type)+as.factor(Transmission)+
         as.factor(Owner)+as.factor(Seller.Type)+Engine+Power+Torque+
         as.factor(Drivetrain)+Length+Width+Height+as.factor(SeatingCapacity)
         +TankCapacity, data=train)
summary(lm)
```

## Results

#### R\^2

```{r, echo=F}
summary(lm)$adj.r.squared

```

#### Plot Fitted vs Observed

```{r, echo=F}
ggplot(data=train,aes(x = Price, y =  lm$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  geom_smooth(color = '#56B4E9', se = F) +
  labs(x = 'Price', y = 'Residuals', title = 'Fitted vs. Observed') +
  #hrbrthemes::theme_ipsum_rc() +
  theme(title = element_text(colour = 'black'))
```

## 

```{r}
par(mfrow=c(2,2))

plot(
  lm,
  which = 1,
  bty = 'n',
  pch = 19,
  col = scales::alpha('#D55E00', .1),
  #col.smooth = '#56B4E9',
  lwd = 1,
  cex =.95,
  col.lab = 'gray25',
  col.axis = 'gray50',
  col.sub = 'gray50',
  cex.caption = 1,
  cex.oma.main = 1.25,
  yaxt = 'n'
)
axis(2, col = 'gray75', col.axis = 'gray33')
axis(1, col = 'gray75', col.axis = 'gray33')

plot(
  lm,
  which = 2,
  bty = 'n',
  pch = 19,
  col = scales::alpha('#D55E00', .1),
  #col.smooth = '#56B4E9',
  lwd = 1,
  cex =.95,
  col.lab = 'gray25',
  col.axis = 'gray50',
  col.sub = 'gray50',
  cex.caption = 1,
  cex.oma.main = 1.25,
  yaxt = 'n'
)
axis(2, col = 'gray75', col.axis = 'gray33')
axis(1, col = 'gray75', col.axis = 'gray33')

plot(
  lm,
  which = 3,
  bty = 'n',
  pch = 19,
  col = scales::alpha('#D55E00', .1),
  #col.smooth = '#56B4E9',
  lwd = 1,
  cex =.95,
  col.lab = 'gray25',
  col.axis = 'gray50',
  col.sub = 'gray50',
  cex.caption = 1,
  cex.oma.main = 1.25,
  yaxt = 'n'
)
axis(2, col = 'gray75', col.axis = 'gray33')
axis(1, col = 'gray75', col.axis = 'gray33')

plot(
  lm,
  which = 5,
  bty = 'n',
  pch = 19,
  col = scales::alpha('#D55E00', .1),
  #col.smooth = '#56B4E9',
  lwd = 1,
  cex =.95,
  col.lab = 'gray25',
  col.axis = 'gray50',
  col.sub = 'gray50',
  cex.caption = 1,
  cex.oma.main = 1.25,
  yaxt = 'n'
)
axis(2, col = 'gray75', col.axis = 'gray33')
axis(1, col = 'gray75', col.axis = 'gray33')

```

## Kilometer and Log Price

### Look the histograms of log_price and log_km

```{r}
train$log_price <- log(train$Price)
par(mfrow=c(1,2))
ggplot(train, aes(x = Price)) + 
  geom_histogram(aes(y = ..density..),
                 colour = 1, fill = "white") +
  geom_density(lwd = 1, colour = 4,
               fill = 4, alpha = 0.25) +
  xlab("Price") + ylab("Density")

```

## 

```{r}

ggplot(train, aes(x = log_price)) + 
  geom_histogram(aes(y = ..density..),
                 colour = 1, fill = "white") +
  geom_density(lwd = 1, colour = 4,
               fill = 4, alpha = 0.25) +
  xlab("Log Price") + ylab("Density")
```

## New Model

We fit another model with Log-Price. But... we ca do better!

We can try to remove engine and torque, which are very positive correlated with power.

Power is the only significant variable among these three.

```{r}
lm_pwr <- lm(log_price ~ as.factor(Make)+Year+Kilometer+as.factor(Fuel.Type)+as.factor(Transmission)+
         as.factor(Owner)+as.factor(Seller.Type)+Power+
         as.factor(Drivetrain)+Length+Width+Height+as.factor(SeatingCapacity)
         +TankCapacity, data=train)

summary(lm_pwr)
```

## Results

```{r}
ggplot(data=train,aes(x = log_price, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Log Price', y = "Residuals", title = 'Log Price vs. Residuals') +
  theme(title = element_text(colour = '#585858'))


```

## 

```{r}
ggplot(data=train,aes(x = c(1:nrow(train)), y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = "",y = 'Residuals', title = 'Residuals') +
  theme(title = element_text(colour = '#585858'))
```

## 

```{r}
ggplot(train, aes(x = lm_pwr$residuals)) + 
  geom_histogram(aes(y = ..density..),
                 colour = 1, fill = "white") +
  geom_density(lwd = 1, colour = 4,
                 alpha = 0.2) +
  xlab("Log Price") + ylab("Density")  +
stat_function(fun = dnorm, 
              args = list(mean = 0, sd = sd(lm_pwr$residual)),
              colour =2,
              lwd = 1,
              alpha = 1)
```

## Fitted vs Actual

```{r}
ggplot(data=train,aes(x = seq(nrow(train)), y = log_price)) +
  geom_point(alpha = .5, color = '#D55E00') +
  geom_point(aes(x = seq(nrow(train)), y = predict(lm_pwr) ), color = '#53004B', alpha=.5) +
  xlab("") + ylab("") +
  theme(title = element_text(colour = '#585858'))
```

```{r}
par(mfrow=c(1,1))
plot(as.factor(train$Make), lm_pwr$residuals)

# Year vs Res

ggplot(data=train,aes(x = Year, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Year', y = "Residuals", title = 'Year vs. Residuals') +
  theme(title = element_text(colour = '#585858'))


```

## 

```{r}

# Km vs Res

ggplot(data=train,aes(x = Kilometer, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Kilometer', y = "Residuals", title = 'Kilometer vs. Residuals') +
  theme(title = element_text(colour = '#585858'))

```

## 

```{r}
# Engine vs Res

ggplot(data=train,aes(x = Engine, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Engine', y = "Residuals", title = 'Engine vs. Residuals') +
  theme(title = element_text(colour = '#585858'))
```

## 

```{r}
# Power vs Res

ggplot(data=train,aes(x = Power, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Power', y = "Residuals", title = 'Power vs. Residuals') +
  theme(title = element_text(colour = '#585858'))

```

## 

```{r}
# Torque vs Res

ggplot(data=train,aes(x = Torque, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Torque', y = "Residuals", title = 'Torque vs. Residuals') +
  theme(title = element_text(colour = '#585858'))

```

## 

Pattern???

```{r}
# Length vs Res

mygroup <- c(0,4200, max(train$Length))
ggplot(data=train,aes(x = Length, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, aes(colour =  cut(Length,breaks = mygroup) ), show.legend=F) +
  labs(x = 'Length', y = "Residuals", title = 'Length vs. Residuals') +
  theme(title = element_text(colour = '#585858'))
```

## 

```{r}
# Width vs Res

ggplot(data=train,aes(x = Width, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Width', y = "Residuals", title = 'Width vs. Residuals') +
  theme(title = element_text(colour = '#585858'))

```

## 

```{r}
# Height vs Res

ggplot(data=train,aes(x = Height, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'Height', y = "Residuals", title = 'Height vs. Residuals') +
  theme(title = element_text(colour = '#585858'))

```

## 

```{r}
# TankCapacity vs Res

ggplot(data=train,aes(x = TankCapacity, y = lm_pwr$residuals)) +
  geom_point(alpha = .25, color = '#D55E00') +
  labs(x = 'TankCapacity', y = "Residuals", title = 'TankCapacity vs. Residuals') +
  theme(title = element_text(colour = '#585858'))
```
